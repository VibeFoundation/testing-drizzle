// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId, id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, id])
}

model User {
  id                  String           @id @default(cuid())
  name                String?
  email               String?          @unique
  emailVerified       DateTime?
  phoneNumber         String           @unique
  phoneNumberVerified DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  smsVerification     SmsVerification?
}

model SmsVerification {
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @unique
  token   String   @unique
  expires DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
